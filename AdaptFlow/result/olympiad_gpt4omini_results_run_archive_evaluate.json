[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 26.4%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate answer.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 25.9%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better answers for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the answer based on other agents' answers\n    debate_instruction = \"Given answers to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and answers\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and answers\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 29.8%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate answer.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 19.3%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting answers could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best answer.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 28.8%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 27.6%"
    },
    {
        "reflection": "Upon reviewing the failure cases, several patterns emerge: (1) The agent sometimes outputs 0 or 1 as answers to nontrivial mathematical problems, which suggests that the LLM either misunderstood the question, failed to parse the mathematical context, or made a calculation error. (2) For function-finding or symbolic answer problems, the agent outputs a numeric value (e.g., 1 instead of f(n) = n^2), indicating a lack of answer type awareness. (3) For geometry and diagram-based problems, the agent may not recognize the need to request or reason about missing visual information. (4) In some cases, the agent may not verify that its answer matches the expected type (integer, expression, etc.), leading to mismatches.\n\nImprovements:\n- Add an answer type and format detection step before finalizing the answer. This can be achieved by introducing an 'Answer Type Analyzer' agent that, given the problem statement, predicts the expected answer type (integer, expression, value with units, etc.).\n- Use this answer type to guide the Chain-of-Thought or Step-back agent, prompting it to output an answer matching the required format.\n- Add a final 'Verifier' agent that checks whether the answer is plausible (e.g., not 0 or 1 unless justified, matches the expected type, and is consistent with the problem statement). If not, trigger a re-solve with explicit instructions to correct the answer type or format.\n- For diagram-based problems, prompt the agent to explicitly state if additional information (like a diagram) is required, and to reason accordingly.\n\nThis architecture ensures that the answer is not only reasoned out but also checked for type and plausibility, reducing errors due to misinterpretation or careless mistakes.",
        "thought": "**Insights:**\nThe best-performing solutions for Algebra and Combinatorics use a simple Chain-of-Thought (CoT) agent, while Geometry and Number Theory benefit from a Step-back Abstraction approach that first elicits relevant principles before reasoning step by step. The Step-back Abstraction method, while helpful for certain domains, introduces extra complexity and may not always be necessary for tasks where direct reasoning suffices. To design a generalizable and adaptable architecture, we should combine these approaches: first, attempt CoT reasoning directly; if the model expresses uncertainty or requests clarification, fall back to a principle-extraction step followed by CoT reasoning. This two-stage adaptive approach leverages the efficiency of CoT for straightforward problems and the depth of Step-back Abstraction for more challenging ones, without unnecessary overhead.\n\n**Overall Idea:**\n- Start with a CoT agent to solve the task directly.\n- If the CoT agent's 'thinking' output contains uncertainty markers (e.g., 'not sure', 'uncertain', 'need more information', or a question), trigger a principle-extraction agent to identify relevant concepts.\n- Use the extracted principles, together with the original task, as input to a second CoT agent for a refined solution.\n- This adaptive control flow generalizes well and can be easily extended or specialized for subtasks as needed.\n\n**Implementation:**\n1. Instantiate a CoT agent (outputs: 'thinking', 'answer').\n2. Run the CoT agent on the task.\n3. Check the 'thinking' output for uncertainty markers.\n4. If confident, return the answer. If not, instantiate a Principle agent (outputs: 'thinking', 'principle').\n5. Use the Principle agent to extract relevant concepts.\n6. Run a second CoT agent with the task and extracted principle as input.\n7. Return the final answer from the second CoT agent.\n\nThis approach keeps the architecture simple, minimizes redundant LLM calls, and adapts to task complexity.",
        "name": "Adaptive CoT with Step-back Fallback",
        "code": "def forward(self, taskInfo):\n    # Step 1: Chain-of-Thought reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n    thinking, answer = cot_agent([taskInfo], cot_instruction)\n\n    # Step 2: Check for uncertainty in the CoT agent's thinking\n    uncertainty_markers = ['not sure', 'uncertain', 'need more information', 'I do not know', 'I am unsure', '?', 'unclear']\n    thinking_text = thinking.content.lower()\n    if not any(marker in thinking_text for marker in uncertainty_markers):\n        return answer\n\n    # Step 3: Principle extraction if uncertainty is detected\n    principle_instruction = (\n        \"What are the mathematics principles and concepts involved in solving this task? \"\n        \"First think step by step. Then list all involved principles and explain them.\"\n    )\n    principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n    principle_thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n    # Step 4: Refined Chain-of-Thought reasoning with principle\n    refined_cot_instruction = (\n        \"Given the question and the involved principle behind the question, \"\n        \"think step by step and then solve the task.\"\n    )\n    refined_cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n    refined_thinking, refined_answer = refined_cot_agent([taskInfo, principle], refined_cot_instruction)\n    return refined_answer\n",
        "generation": 3,
        "label": "outer_loop",
        "special_label": "fail_reflexion",
        "fitness": "Accuracy: 34.4%"
    }
]