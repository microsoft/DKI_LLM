[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting a solution, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'solution'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, solution = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final solution\n    return solution\n",
        "generation": "initial",
        "fitness": "Accuracy: 49.9%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its solution based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'solution'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the solution\n    critic_instruction = \"Please review the solution above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, solution = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, solution], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, solution, feedback])\n\n        # Reflect on previous attempts and refine the solution\n        thinking, solution = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return solution\n",
        "generation": "initial",
        "fitness": "Accuracy: 49.3%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated solution.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'solution'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and solutions, reason over them carefully and provide a final solution.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'solution'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_solution = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, solution = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, solution = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_solution[r].append(solution)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, solution = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_solution[max_round-1], final_decision_instruction)\n    return solution\n",
        "generation": "initial",
        "fitness": "Accuracy: 52.7%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'solution'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, solution = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return solution\n",
        "generation": "initial",
        "fitness": "Accuracy: 47.9%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse solutions\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'solution'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and solutions\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final solution.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'solution'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_solutions = []\n    thinking, solution = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the solution to the list of possible solutions\n    possible_solutions.extend([thinking, solution])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting solution\n        cot_inputs.extend([thinking, solution])\n\n        # Generate another interesting solution\n        thinking, solution = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_solutions.extend([thinking, solution])\n\n    # Make the final decision based on all generated solutions\n    thinking, solution = final_decision_agent([taskInfo] + possible_solutions, final_decision_instruction)\n    return solution\n",
        "generation": "initial",
        "fitness": "Accuracy: 50.5%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'solution'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, solution = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return solution\n",
        "generation": "initial",
        "fitness": "Accuracy: 50.7%"
    },
    {
        "thought": "**Insights:**\nThe best-performing agents for each MATH subtask share several core elements: (1) diversity in initial solution generation (multiple agents with different roles/temperatures), (2) explicit answer extraction and self-consistency/consensus, (3) a strong external verifier with revision/synthesis, and (4) targeted clarification or stepwise refinement in some cases. However, the most robust architectures avoid excessive sequential modules, instead favoring a modular, looped structure with clear error correction and consensus. The main differences across subtasks are in the depth of the verification/revision loop (single or double), the use of clarification/defense before full revision, and whether stepwise refinement is used.\n\n**Overall Idea:**\nI propose a \"Generalized Modular Consensus-Verification-Revision Agent\" that integrates the following:\n- Diverse initial solution generation (N agents, different roles/temperatures).\n- Explicit answer extraction and self-consistency consensus (majority voting on boxed/structured answers).\n- If consensus is not unique, synthesize a final answer from all solutions.\n- A strong external verifier checks the selected solution for correctness, completeness, and formatting.\n- If the verifier finds an issue, a clarification/defense phase is triggered (the original solver can clarify or defend their answer in light of the critique).\n- If the verifier is still unsatisfied, a synthesis agent revises the solution using all available information (all solutions, extractions, verifier feedback, and clarification/defense).\n- The revised solution is re-verified (one more loop). If still not accepted, the best available solution is returned.\nThis architecture is modular and general: it can be easily adapted to add stepwise refinement or peer review as needed, but remains simple and robust for all subtasks. It combines the strengths of the best agents from prealgebra (clarification/defense), precalculus (external verification with minimal revision), and number theory (targeted revision), while keeping the control flow manageable.\n\n**Implementation:**\n1. Generate N diverse solutions (different roles/temperatures).\n2. Use a specialized extraction agent to extract boxed/structured answers from each solution.\n3. If a unique majority answer exists, select it; else, synthesize a final answer from all solutions and extractions.\n4. Pass the selected answer and its reasoning to a verifier agent. If correct, return it.\n5. If not, the verifier requests a clarification/defense from the original solver, providing its critique as input.\n6. The solver responds with a clarification/defense. The verifier checks again. If satisfied, return the solution.\n7. If still not satisfied, a synthesis agent revises the solution using all available information (solutions, extractions, verifier feedback, clarification/defense). The revised solution is re-verified. If correct, return it; else, return the best available solution.\nThis design is general, modular, and can be further adapted for specific subtasks if needed.",
        "name": "Generalized Modular Consensus-Verification-Revision Agent",
        "code": "def forward(self, taskInfo):\n    import re\n    from collections import Counter\n\n    # Helper to extract boxed/structured answers\n    def extract_boxed(text):\n        matches = re.findall(r'\\\\boxed\\{([^}]*)\\}', text)\n        if matches:\n            return matches[-1].strip()\n        tuple_match = re.search(r'\\(([^)]+)\\)', text)\n        if tuple_match:\n            return tuple_match.group(0).strip()\n        frac_match = re.search(r'\\\\frac\\{([^}]*)\\}\\{([^}]*)\\}', text)\n        if frac_match:\n            return f\"{frac_match.group(0)}\"\n        num_match = re.search(r'([\\d]+)\\s*$', text)\n        if num_match:\n            return num_match.group(1)\n        return None\n\n    N = 5  # Number of diverse solution agents\n    roles = [\n        'Math Professor',\n        'Grade School Teacher',\n        'Math Enthusiast',\n        'Math Olympiad Student',\n        'Helpful Assistant'\n    ]\n    agents = [LLMAgentBase(['thinking', 'solution'], f'Diverse Agent #{i+1}', role=roles[i], temperature=0.7+0.1*i) for i in range(N)]\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    solutions = []  # List of (thinking, solution) tuples\n    for i, agent in enumerate(agents):\n        thinking, solution = agent([taskInfo], cot_instruction, i)\n        solutions.append((thinking, solution))\n\n    # Step 2: Use specialized Answer Extraction Agent for each solution\n    extraction_agent = LLMAgentBase(['extracted_answer'], 'Answer Extraction Agent', role='Mathematical Answer Extractor', temperature=0.1)\n    extracted_answers = []\n    extracted_to_solution = {}\n    extraction_instruction = (\n        \"Extract ONLY the final boxed answer (including tuples or fractions if present) from the solution above. If the answer is an ordered triple, fraction, or tuple, extract it in its mathematical form. Do not explain.\"\n    )\n    for i, (thinking, solution) in enumerate(solutions):\n        extracted_info = extraction_agent([taskInfo, solution], extraction_instruction, i)[0]\n        extracted = extracted_info.content.strip()\n        if not extracted:\n            extracted = extract_boxed(solution.content)\n        extracted_answers.append(extracted)\n        if extracted is not None and extracted not in extracted_to_solution:\n            extracted_to_solution[extracted] = (thinking, solution)\n\n    # Step 3: Self-consistency consensus\n    answer_counts = Counter([a for a in extracted_answers if a is not None])\n    if answer_counts:\n        most_common = answer_counts.most_common()\n        top_count = most_common[0][1]\n        top_answers = [ans for ans, cnt in most_common if cnt == top_count]\n        if len(top_answers) == 1:\n            boxed = top_answers[0]\n            thinking, solution = extracted_to_solution[boxed]\n        else:\n            final_inputs = [taskInfo]\n            for boxed in top_answers:\n                thinking, solution = extracted_to_solution[boxed]\n                final_inputs.extend([thinking, solution])\n            for ans in top_answers:\n                final_inputs.append(Info('extracted_answer', 'Extraction Consensus', ans, -1))\n            final_decision_instruction = \"Among the above solutions and extracted answers, reason over them carefully and select the best final answer in the required format.\"\n            final_decision_agent = LLMAgentBase(['thinking', 'solution'], 'Final Decision Agent', temperature=0.1)\n            thinking, solution = final_decision_agent(final_inputs, final_decision_instruction)\n    else:\n        final_inputs = [taskInfo]\n        for thinking, solution in solutions:\n            final_inputs.extend([thinking, solution])\n        final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final solution.\"\n        final_decision_agent = LLMAgentBase(['thinking', 'solution'], 'Final Decision Agent', temperature=0.1)\n        thinking, solution = final_decision_agent(final_inputs, final_decision_instruction)\n\n    # Step 4: Verifier-Guided Clarification and Synthesis Loop (max 2 rounds)\n    verifier_agent = LLMAgentBase(['feedback', 'correct'], 'Verifier Agent', role='Mathematical Proof Checker', temperature=0.1)\n    clarification_agent = LLMAgentBase(['clarification'], 'Clarification Agent', role='Original Solver', temperature=0.4)\n    synthesis_agent = LLMAgentBase(['thinking', 'solution'], 'Synthesis Agent', temperature=0.3)\n    extraction_instruction = (\n        \"Extract ONLY the final boxed answer (including tuples or fractions if present) from the solution above. If the answer is an ordered triple, fraction, or tuple, extract it in its mathematical form. Do not explain.\"\n    )\n    for round_idx in range(2):\n        # Extract answer for current solution\n        extracted_info = extraction_agent([taskInfo, solution], extraction_instruction, 100+round_idx)[0]\n        verification_inputs = [taskInfo, solution, extracted_info]\n        verifier_instruction = (\n            \"Given the original task, the solution, and the extracted answer, check the solution for mathematical correctness, completeness, and required answer format (including fraction simplification, tuple order, etc.). If it is fully correct, output 'True' in the 'correct' field. Otherwise, provide a detailed critique in the 'feedback' field and output 'False' in the 'correct' field.\"\n        )\n        feedback, correct = verifier_agent(verification_inputs, verifier_instruction, round_idx)\n        if correct.content == 'True':\n            return solution\n        # Step 5: Clarification/Defense phase\n        clarification_instruction = (\n            \"The verifier has raised the following critique about your solution above. Please clarify, defend, or correct your answer as needed. If you made a minor mistake, fix it; if you believe your answer is correct, defend it with clear reasoning.\"\n        )\n        clarification, = clarification_agent([taskInfo, solution, feedback], clarification_instruction, round_idx)\n        # Verifier checks again with clarification\n        verification_inputs2 = [taskInfo, solution, extracted_info, clarification]\n        verifier_instruction2 = (\n            \"Given the original task, the solution, the extracted answer, and the solver's clarification/defense above, check if the solution is now fully correct and in the required format. If so, output 'True' in the 'correct' field. Otherwise, provide a detailed critique in the 'feedback' field and output 'False' in the 'correct' field.\"\n        )\n        feedback2, correct2 = verifier_agent(verification_inputs2, verifier_instruction2, 100+round_idx)\n        if correct2.content == 'True':\n            return solution\n        # Step 6: Synthesis/Revision phase\n        revise_instruction = (\n            \"Given the original problem, the current solution, all other solutions and extracted answers, the verifier's critique, and the solver's clarification/defense, revise or synthesize the best possible solution. Provide a new step-by-step solution with the final answer in the required format.\"\n        )\n        synthesis_inputs = [taskInfo, solution, feedback2, clarification]\n        for thinking2, solution2 in solutions:\n            synthesis_inputs.extend([thinking2, solution2])\n        for ans in extracted_answers:\n            synthesis_inputs.append(Info('extracted_answer', 'Extraction Consensus', ans, -1))\n        thinking, solution = synthesis_agent(synthesis_inputs, revise_instruction)\n        # Loop continues with new solution\n    # Return the last solution if still not verified as correct\n    return solution\n",
        "generation": 3,
        "label": "outer_loop",
        "fitness": "Accuracy: 61.5%"
    }
]