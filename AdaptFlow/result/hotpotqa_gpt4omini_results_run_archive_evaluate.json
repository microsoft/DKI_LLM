[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "generation": "initial",
        "fitness": "F1 Score: 69.0%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate answer.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "generation": "initial",
        "fitness": "F1 Score: 68.3%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better answers for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the answer based on other agents' answers\n    debate_instruction = \"Given answers to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and answers\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and answers\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "F1 Score: 68.5%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate answer.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "F1 Score: 67.9%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting answers could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best answer.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "F1 Score: 69.3%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "F1 Score: 67.9%"
    },
    {
        "thought": "**Insights:**\nThe best-performing solutions for the MATH subtasks fall into three main paradigms: (1) Quality-Diversity (QD) with verification/self-consistency, (2) LLM Debate among diverse expert roles, and (3) Dynamic expert routing based on task characteristics. Each has strengths: QD+verification is robust to LLM errors, Debate leverages diverse perspectives, and Dynamic Routing adapts to task type. However, these approaches are often used in isolation, and each has weaknesses: QD can be inefficient, Debate may not converge, and Routing may misclassify tasks.\n\n**Overall Idea:**\nTo maximize generalizability and adaptability, I propose a \"Hybrid Modular Agent\" that dynamically selects and combines the best reasoning modules for each task. The architecture routes the task to either (a) a QD-with-verification pipeline, (b) a Debate pipeline, or (c) a single-expert pipeline, based on an initial meta-routing agent's assessment of task type and difficulty. This enables the agent to leverage QD's robustness for hard/ambiguous problems, Debate's diversity for open-ended or ambiguous tasks, and efficient single-expert reasoning for straightforward cases. The meta-routing agent can be trained or prompted to select the best pipeline, and the architecture is modular for easy extension.\n\n**Implementation:**\n1. Use a Meta-Routing Agent to analyze the task and select one of three pipelines: QD+Verification, Debate, or Single-Expert.\n2. If QD+Verification is selected:\n    - Generate multiple diverse solutions (as in QD).\n    - Verify each solution with a Verifier Agent.\n    - Aggregate verified solutions and use a Final Decision Agent to select the best answer.\n3. If Debate is selected:\n    - Initialize several Debate Agents with different expert roles.\n    - Run multiple rounds of debate, updating answers.\n    - Use a Final Decision Agent to select the best answer.\n4. If Single-Expert is selected:\n    - Route to the most appropriate expert (Math Professor, Teacher, etc.) using a Routing Agent.\n    - Use the expert's answer as the final answer.\n5. Always include the original taskInfo in the context for all agents.\n6. The architecture is modular and can be easily extended or specialized for new subtasks.",
        "name": "Hybrid Modular Agent with Dynamic Pipeline Selection",
        "code": "def forward(self, taskInfo):\n    # Step 1: Meta-routing to select pipeline\n    meta_routing_instruction = (\n        \"Given the following math problem, decide which reasoning pipeline is most suitable. \"\n        \"Choose one of: 'QD', 'Debate', or 'Expert'. \"\n        \"- Use 'QD' for complex, ambiguous, or calculation-heavy problems. \"\n        \"- Use 'Debate' for open-ended, ambiguous, or multi-step reasoning problems. \"\n        \"- Use 'Expert' for straightforward or well-categorized problems. \"\n        \"Reply with the pipeline name in the 'pipeline' field and a brief justification in 'justification'.\"\n    )\n    meta_routing_agent = LLMAgentBase(['pipeline', 'justification'], 'Meta-Routing Agent', temperature=0.2)\n    pipeline_info, justification_info = meta_routing_agent([taskInfo], meta_routing_instruction)\n    pipeline = pipeline_info.content.strip().lower()\n\n    # Step 2: QD+Verification pipeline\n    if pipeline == 'qd':\n        cot_initial_instruction = \"Please think step by step and then solve the task.\"\n        qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        N_max = 3\n        cot_inputs = [taskInfo]\n        solutions = []\n        thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n        solutions.append((thinking, answer))\n        for i in range(1, N_max):\n            cot_inputs = [taskInfo]\n            for t, a in solutions:\n                cot_inputs.extend([t, a])\n            thinking, answer = cot_agent(cot_inputs, qd_instruction, i)\n            solutions.append((thinking, answer))\n        verifier_instruction = (\n            \"Given the above thinking and answer, check if the answer is correct. \"\n            \"If it is correct, output 'True' in 'correct'. Otherwise, output 'False' and provide feedback.\"\n        )\n        verifier_agent = LLMAgentBase(['correct', 'feedback'], 'Verifier Agent', temperature=0.0)\n        verified_solutions = []\n        for idx, (thinking, answer) in enumerate(solutions):\n            verify_inputs = [taskInfo, thinking, answer]\n            correct, feedback = verifier_agent(verify_inputs, verifier_instruction, idx)\n            verified_solutions.append((thinking, answer, correct, feedback))\n        for thinking, answer, correct, feedback in verified_solutions:\n            if correct.content.strip().lower() == 'true':\n                return answer\n        final_decision_instruction = (\n            \"Given all the above answers and their verification feedback, reason over them carefully and provide the best possible final answer.\"\n        )\n        final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n        all_infos = [taskInfo]\n        for thinking, answer, correct, feedback in verified_solutions:\n            all_infos.extend([thinking, answer, correct, feedback])\n        thinking, answer = final_decision_agent(all_infos, final_decision_instruction)\n        return answer\n\n    # Step 3: Debate pipeline\n    elif pipeline == 'debate':\n        debate_initial_instruction = \"Please think step by step and then solve the task.\"\n        debate_instruction = (\n            \"Given answers to the problem from other agents, consider their opinions as additional advice. \"\n            \"Please think carefully and provide an updated answer.\"\n        )\n        debate_roles = ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']\n        debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in debate_roles]\n        final_decision_instruction = (\n            \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n        )\n        final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n        max_round = 2\n        all_thinking = [[] for _ in range(max_round)]\n        all_answer = [[] for _ in range(max_round)]\n        for r in range(max_round):\n            for i in range(len(debate_agents)):\n                if r == 0:\n                    thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n                else:\n                    input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                    thinking, answer = debate_agents[i](input_infos, debate_instruction)\n                all_thinking[r].append(thinking)\n                all_answer[r].append(answer)\n        thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n        return answer\n\n    # Step 4: Expert pipeline\n    else:\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_roles = ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in expert_roles]\n        routing_instruction = (\n            \"Given the task, please choose an Expert to answer the question. \"\n            \"Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        )\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3  # Default to helpful assistant\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "generation": 1,
        "label": "outer_loop",
        "special_label": "fail_reflexion",
        "fitness": "F1 Score: 73.8%"
    }
]