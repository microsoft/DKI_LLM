[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "generation": "initial",
        "fitness": "F1 Score: 79.8%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate answer.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "generation": "initial",
        "fitness": "F1 Score: 79.5%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better answers for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the answer based on other agents' answers\n    debate_instruction = \"Given answers to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and answers\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and answers\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "F1 Score: 79.3%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate answer.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "F1 Score: 79.4%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting answers could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best answer.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "F1 Score: 79.7%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "F1 Score: 76.8%"
    },
    {
        "reflection": "The mistakes observed in the current agent architecture primarily stem from insufficient context-aware reasoning, lack of explicit evidence extraction and alignment, and inadequate answer type and granularity control. Specifically:\n\n1. **Evidence Extraction and Alignment:** The agent sometimes extracts partial or incorrect spans (e.g., '3, 20, 32' instead of '55'), or selects a distractor (e.g., 'British blockade' instead of 'French shipping'). This is because the answer extraction is not always tightly coupled with the passage and the question's intent. There is no explicit step to extract the minimal supporting evidence and then derive the answer from it.\n\n2. **Temporal and Numerical Reasoning:** For questions involving time intervals or calculations (e.g., 'How many years after...'), the agent may pick the wrong value if it does not explicitly reason about the timeline or perform the calculation step-by-step.\n\n3. **Granularity and Type Normalization:** The agent sometimes returns an answer with the wrong granularity (e.g., a list of components instead of a sum, or a number with the wrong decimal precision). This is due to insufficient answer type and granularity control.\n\n**Improvements:**\n- Add an explicit Evidence Extraction step before answer generation, where the agent extracts the minimal text span or fact(s) from the passage that directly support the answer.\n- Add an explicit Answer Derivation step, where the agent is instructed to compute or synthesize the final answer strictly from the extracted evidence, ensuring correct aggregation, calculation, and granularity.\n- Strengthen Answer Type and Granularity Classification, so the agent knows whether to sum, list, or select a specific format.\n- Optionally, add a Consistency Check step to ensure the derived answer matches the evidence and the question intent.\n\nThis pipeline will reduce hallucinations, improve alignment with the passage, and ensure the answer is in the correct form.",
        "thought": "**Insights:**\nTo address the observed mistakes, the architecture should explicitly extract supporting evidence from the passage, then derive the answer from that evidence, with clear instructions on answer type and granularity. This reduces the risk of partial, misaligned, or incorrectly aggregated answers. The pipeline should be: (1) Evidence Extraction, (2) Answer Type & Granularity Classification, (3) Answer Derivation from Evidence, (4) Normalization, and (5) Consistency Check if needed.\n\n**Overall Idea:**\nThe agent first extracts the minimal supporting evidence from the passage. Next, it classifies the expected answer type and granularity (e.g., sum, list, entity, number, etc.). Then, it derives the answer strictly from the extracted evidence, following the classified type/granularity. Finally, the answer is normalized to the canonical format. If there is ambiguity or inconsistency, a final decision agent is invoked.\n\n**Implementation:**\n1. Evidence Extraction Agent: Extracts the minimal text span(s) or fact(s) from the passage that support the answer.\n2. Answer Type & Granularity Classifier: Determines the required answer type (number, list, entity, etc.) and granularity (sum, component list, etc.).\n3. Answer Derivation Agent: Given the question and the extracted evidence, derives the answer, performing calculations or aggregations as needed.\n4. Answer Normalization Agent: Reformats the answer to the canonical form.\n5. (Optional) Consistency/Entailment Check: Ensures the answer is fully supported by the evidence and matches the question intent. If not, escalate to a final decision agent.",
        "name": "Evidence-Aligned Derivation and Normalization",
        "code": "def forward(self, taskInfo):\n    # Step 1: Evidence Extraction\n    evidence_instruction = (\n        \"Given the passage and question, extract the minimal text span(s), sentence(s), or fact(s) from the passage that directly support the answer. \"\n        \"Be as concise as possible, and if multiple pieces are needed (e.g., for sums), extract all relevant ones.\"\n    )\n    evidence_agent = LLMAgentBase(['evidence'], 'Evidence Extraction Agent')\n    evidence, = evidence_agent([taskInfo], evidence_instruction, 0)\n\n    # Step 2: Answer Type & Granularity Classification\n    answer_type_instruction = (\n        \"Based on the question and passage, what is the expected answer type (number, list, entity, date, etc.) and what is the required granularity (e.g., sum, component list, specific entity, etc.)? \"\n        \"Output in the format: {'answer_type': ..., 'granularity': ...}\"\n    )\n    answer_type_agent = LLMAgentBase(['answer_type', 'granularity'], 'Answer Type & Granularity Classifier')\n    answer_type, granularity = answer_type_agent([taskInfo, evidence], answer_type_instruction, 0)\n\n    # Step 3: Answer Derivation from Evidence\n    derive_instruction = (\n        \"Given the question and the extracted evidence, derive the answer strictly and only from the evidence. \"\n        \"If calculation or aggregation is needed (e.g., sum, difference, count), perform it step by step. \"\n        \"Format the answer according to the required answer_type ('{answer_type}') and granularity ('{granularity}'). \"\n        \"If the evidence is ambiguous or insufficient, explain briefly and output your best guess.\"\n    ).format(answer_type=answer_type.content.strip(), granularity=granularity.content.strip())\n    derive_agent = LLMAgentBase(['thinking', 'answer'], 'Answer Derivation Agent')\n    thinking, answer = derive_agent([taskInfo, evidence, answer_type, granularity], derive_instruction, 0)\n\n    # Step 4: Answer Normalization\n    normalization_instruction = (\n        \"Given the passage, question, and the derived answer, reformat or map the answer to the canonical expected form. \"\n        \"For numbers, output only the number(s) (no units unless required). For entities, output the canonical entity name. \"\n        \"For lists, output a comma-separated list. If multiple plausible answers, list all. \"\n        \"If the answer is ambiguous, explain briefly and output the best guess.\"\n    )\n    normalization_agent = LLMAgentBase(['normalized_answer'], 'Answer Normalization Agent')\n    normalized_answer, = normalization_agent([taskInfo, answer, answer_type, granularity], normalization_instruction, 0)\n\n    # Step 5: Consistency/Entailment Check\n    entailment_instruction = (\n        \"Given the passage, question, extracted evidence, and normalized answer, does the evidence fully support and entail the answer to the question? \"\n        \"If yes, output 'True' in 'supported'. If not, explain briefly and output 'False'.\"\n    )\n    entailment_agent = LLMAgentBase(['supported', 'explanation'], 'Entailment Verification Agent')\n    supported, explanation = entailment_agent([taskInfo, evidence, normalized_answer], entailment_instruction, 0)\n\n    if supported.content.strip() == 'True':\n        return normalized_answer\n    else:\n        # Final fallback: aggregate all and let a final decision agent choose\n        fallback_instruction = (\n            \"Given the question, passage, extracted evidence, normalized answer, and the entailment check explanation, \"\n            \"carefully review all information and output the best possible answer in the required format. If ambiguous, explain briefly and output your best guess.\"\n        )\n        fallback_agent = LLMAgentBase(['thinking', 'answer'], 'Final Fallback Agent', temperature=0.15)\n        thinking_fallback, answer_fallback = fallback_agent([taskInfo, evidence, normalized_answer, explanation], fallback_instruction, 0)\n        return answer_fallback\n",
        "generation": 3,
        "label": "outer_loop",
        "special_label": "fail_reflexion",
        "fitness": "F1 Score: 82.4%"
    }
]