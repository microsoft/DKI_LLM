[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting a code, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'code'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, code = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final code\n    return code\n",
        "generation": "initial",
        "fitness": "Accuracy: 72.5%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its code based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate answer.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'code'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the code\n    critic_instruction = \"Please review the code above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, code = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, code], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, code, feedback])\n\n        # Reflect on previous attempts and refine the code\n        thinking, code = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return code\n",
        "generation": "initial",
        "fitness": "Accuracy: 72.4%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better codes for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the code based on other agents' code\n    debate_instruction = \"Given code to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'code'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and code\n    final_decision_instruction = \"Given all the above thinking and code, reason over them carefully and provide a final code.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'code'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_code = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, code = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, code = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_code[r].append(code)\n    \n    # Make the final decision based on all debate results and code\n    thinking, code = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_code[max_round-1], final_decision_instruction)\n    return code\n",
        "generation": "initial",
        "fitness": "Accuracy: 73.3%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate answer.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'code'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, code = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return code\n",
        "generation": "initial",
        "fitness": "Accuracy: 71.9%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting code could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best answer.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse code\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'code'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and code\n    final_decision_instruction = \"Given all the above code, reason over them carefully and provide a final code.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'code'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_code = []\n    thinking, code = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the code to the list of possible code\n    possible_code.extend([thinking, code])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting code\n        cot_inputs.extend([thinking, code])\n\n        # Generate another interesting code\n        thinking, code = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_code.extend([thinking, code])\n\n    # Make the final decision based on all generated code\n    thinking, code = final_decision_agent([taskInfo] + possible_code, final_decision_instruction)\n    return code\n",
        "generation": "initial",
        "fitness": "Accuracy: 72.5%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'code'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to code the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, code = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return code\n",
        "generation": "initial",
        "fitness": "Accuracy: 71.5%"
    },
    {
        "thought": "**Insights:**\nThe best-performing agents for MATH subtasks consistently leverage step-by-step chain-of-thought (CoT) reasoning, quality-diversity (QD) through multiple solution attempts, and expert routing/aggregation when needed. However, invoking too many LLM calls or expert routes can add unnecessary complexity and latency. The most robust architectures start with CoT, diversify via a few alternative solutions, and only escalate to expert routing or aggregation if ambiguity or similarity is detected among the solutions. \n\n**Overall Idea:**\nDesign a streamlined, general-purpose agent that always begins with CoT reasoning/code, then generates two additional diverse solutions (QD). Afterward, a single similarity check determines if escalation to expert routing is needed. If the solutions are sufficiently diverse, aggregation is performed directly; otherwise, an expert agent is invoked for one more solution. All solutions are then aggregated by a final decision agent. This approach balances adaptability, generalization, and efficiency, avoiding redundant LLM calls and unnecessary complexity.\n\n**Implementation:**\n1. Use a Chain-of-Thought agent to generate an initial solution.\n2. Generate two more diverse solutions using a QD prompt.\n3. Use a similarity checker agent to determine if the solutions are too similar or ambiguous.\n4. If similarity is high or ambiguity is detected, invoke an expert agent (role chosen by a routing agent) for one more solution.\n5. Aggregate all solutions (CoT, QD, and expert if invoked) using a final decision agent to select the best code.\n6. Always pass taskInfo and all relevant Info objects to each agent as input, and only return the final code Info.\n7. Keep the code modular and avoid redundant LLM calls.\n",
        "name": "Streamlined CoT-QD with Conditional Expert Aggregation",
        "code": "def forward(self, taskInfo):\n    # 1. Initial Chain-of-Thought reasoning/code\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'code'], 'Chain-of-Thought Agent')\n    cot_inputs = [taskInfo]\n    thinking1, code1 = cot_agent(cot_inputs, cot_instruction, 0)\n\n    # 2. Generate two more diverse solutions\n    qd_instruction = \"Try to solve the task in a different way than previous attempts.\"\n    thinking2, code2 = cot_agent(cot_inputs + [thinking1, code1], qd_instruction, 1)\n    thinking3, code3 = cot_agent(cot_inputs + [thinking1, code1, thinking2, code2], qd_instruction, 2)\n\n    # 3. Similarity check to decide if expert escalation is needed\n    similarity_instruction = \"Given the following solutions, do they all use the same approach or are they diverse? If they are too similar or the task is ambiguous, reply 'yes', otherwise 'no'.\"\n    similarity_agent = LLMAgentBase(['need_expert'], 'Similarity Checker', temperature=0.1)\n    need_expert = similarity_agent([taskInfo, code1, code2, code3], similarity_instruction)[0]\n\n    expert_solution = []\n    if 'yes' in need_expert.content.lower():\n        # 4. Route to an expert if needed\n        routing_instruction = \"Given the task, please choose an Expert to code the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing Agent')\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n        if 'professor' in choice.content.lower():\n            role = 'Math Professor'\n        elif 'teacher' in choice.content.lower():\n            role = 'Grade School Teacher'\n        elif 'enthusiast' in choice.content.lower():\n            role = 'Math Enthusiast'\n        else:\n            role = 'Helpful Assistant'\n        expert_agent = LLMAgentBase(['thinking', 'code'], 'Expert Agent', role=role)\n        thinking_expert, code_expert = expert_agent([taskInfo], cot_instruction)\n        expert_solution = [thinking_expert, code_expert]\n\n    # 5. Aggregate all solutions and select the best\n    final_decision_instruction = \"Given all the above code, reason over them carefully and provide a final code.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'code'], 'Final Decision Agent', temperature=0.1)\n    all_infos = [taskInfo, thinking1, code1, thinking2, code2, thinking3, code3] + expert_solution\n    thinking_final, code_final = final_decision_agent(all_infos, final_decision_instruction)\n    return code_final\n",
        "generation": 3,
        "label": "outer_loop",
        "special_label": "fail_reflexion",
        "fitness": "Accuracy: 84.0%"
    }
]