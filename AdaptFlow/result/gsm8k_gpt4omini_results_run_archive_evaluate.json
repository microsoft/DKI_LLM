[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 91.3%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate answer.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 92.4%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better answers for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the answer based on other agents' answers\n    debate_instruction = \"Given answers to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and answers\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and answers\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 93.8%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate answer.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 90.0%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting answers could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best answer.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 92.3%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 89.2%"
    },
    {
        "reflection": "The observed mistakes indicate that the current agent architecture, while robust in verification and self-refinement, is still susceptible to subtle errors in multi-step arithmetic, unit conversions, aggregation, and real-world reasoning. Specifically, the following issues are evident:\n\n1. **Unit and Constraint Handling:** Problems involving units (feet/inches, time, etc.) or implicit constraints (e.g., leftover soup, boxes needed) are mishandled, likely due to insufficient explicit checking of units and constraints in both reasoning and verification stages.\n2. **Arithmetic/Counting Errors:** In multi-step calculations (e.g., total reports stapled, total money paid), the agent sometimes misses a step or misapplies a formula, possibly due to over-reliance on majority voting among similar but subtly flawed answers.\n3. **Verification Blind Spots:** The current two-stage verification checks for correctness but does not explicitly require the verifier to reconstruct the calculation or check each step for consistency and unit correctness. This allows plausible but incorrect answers to slip through, especially when the answer 'looks reasonable.'\n\n**Improvements:**\n- Add a dedicated 'Step-by-Step Verifier' agent that reconstructs the solution independently, checking each calculation and unit conversion, and explicitly flags any mismatches or missing steps.\n- Require the secondary verifier to not only agree/disagree but to reconstruct the full calculation and compare it to the candidate's reasoning.\n- In the self-refinement loop, explicitly prompt the agent to check for unit consistency, aggregation logic, and real-world constraints.\n- Optionally, introduce a 'Unit & Constraint Checker' agent as an additional verification step for problems involving units or resource allocation.\n\nThese changes should make the agent more robust to the types of errors observed in the provided examples.",
        "thought": "**Insights:**\nThe main failure mode is the agent's inability to reliably catch errors in unit conversions, aggregation logic, and constraint satisfaction, even after multi-stage verification. This is because the verifiers are not forced to reconstruct the calculation or explicitly check units/constraints\u2014they often just judge plausibility. To address this, I propose integrating an explicit 'Step-by-Step Verifier' that independently reconstructs the calculation and checks each step, including units and constraints. This verifier will be invoked after the primary verification, and only answers that pass both the primary and step-by-step verification will be considered. In the self-refinement loop, the agent will be prompted to pay special attention to units, aggregation, and constraints. This approach combines the strengths of deliberative verification with explicit, granular checking, reducing the likelihood of subtle arithmetic and logic errors.\n\n**Overall Idea:**\n- Generate K diverse solutions via high-temperature CoT.\n- For each solution, run primary verification (as before).\n- For each solution, run a 'Step-by-Step Verifier' that reconstructs the calculation, checks each step, units, and constraints, and flags any mismatch.\n- Only answers passing both verifications are eligible for majority voting.\n- In the self-refinement loop, prompt the agent to review units, aggregation, and constraints explicitly.\n- If still no answer passes, fallback to majority vote among all generated answers.\n\n**Implementation:**\n1. Generate K diverse solutions using high-temperature CoT.\n2. For each solution, run primary verification (Math Professor).\n3. For each solution, run a Step-by-Step Verifier (Math Auditor) that reconstructs the calculation and checks units/constraints.\n4. Only answers passing both are eligible for majority voting.\n5. If none pass, enter self-refinement loop with explicit prompts to check units, aggregation, and constraints.\n6. Return the most frequent among the doubly-verified answers, or fallback to majority vote among all answers.",
        "name": "Step-by-Step Deliberative Verification Agent",
        "code": "def forward(self, taskInfo):\n    from collections import Counter\n\n    K = 8  # Number of diverse generations\n    N_refine = 2  # Number of self-refinement rounds\n\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=1.2)\n\n    def generate_candidates(taskInfo, K, cot_agent, cot_instruction):\n        candidate_infos = []\n        for i in range(K):\n            thinking, answer = cot_agent([taskInfo], cot_instruction, i)\n            candidate_infos.append({'thinking': thinking, 'answer': answer})\n        return candidate_infos\n\n    # Primary Verifier\n    primary_verifier_instruction = (\n        \"Given the task, the step-by-step explanation, and the answer, check if the answer is correct. \"\n        \"If it is correct, output 'True' in 'correct'. Otherwise, explain the issue in 'feedback' and output 'False' in 'correct'.\"\n    )\n    primary_verifier_agent = LLMAgentBase(['feedback', 'correct'], 'Primary Verifier Agent', role='Math Professor', temperature=0.7)\n\n    # Step-by-Step Verifier\n    step_verifier_instruction = (\n        \"Given the task, the step-by-step explanation, and the answer, independently reconstruct the calculation step by step. \"\n        \"For each step, check if the calculation is correct, if the units are consistent, and if all constraints (such as number of boxes, leftover items, or aggregation logic) are satisfied. \"\n        \"If you find any mismatch, missing step, or unit error, explain it in 'feedback' and output 'False' in 'correct'. If everything matches, output 'True' in 'correct'.\"\n    )\n    step_verifier_agent = LLMAgentBase(['feedback', 'correct'], 'Step-by-Step Verifier Agent', role='Math Auditor', temperature=0.5)\n\n    def stepwise_verification(candidate_infos):\n        doubly_verified_answers = []\n        all_answers = [cand['answer'] for cand in candidate_infos]\n        for cand in candidate_infos:\n            feedback1, correct1 = primary_verifier_agent([\n                taskInfo, cand['thinking'], cand['answer']\n            ], primary_verifier_instruction, 0)\n            feedback2, correct2 = step_verifier_agent([\n                taskInfo, cand['thinking'], cand['answer']\n            ], step_verifier_instruction, 0)\n            if str(correct1.content).strip() == 'True' and str(correct2.content).strip() == 'True':\n                doubly_verified_answers.append(cand['answer'])\n        return doubly_verified_answers, all_answers, candidate_infos\n\n    def most_frequent_answer(answer_infos):\n        answer_strs = [str(a.content).strip() for a in answer_infos]\n        if not answer_strs:\n            return None\n        most_common = Counter(answer_strs).most_common(1)[0][0]\n        for a in answer_infos:\n            if str(a.content).strip() == most_common:\n                return a\n        return answer_infos[0]\n\n    for refine_round in range(N_refine+1):\n        if refine_round == 0:\n            candidate_infos = generate_candidates(taskInfo, K, cot_agent, cot_instruction)\n        else:\n            # Self-refinement: reflect on failed attempts and feedback, with explicit prompt for units/constraints\n            all_thinking = [cand['thinking'] for cand in candidate_infos]\n            all_answers = [cand['answer'] for cand in candidate_infos]\n            # Gather feedback from both verifiers\n            all_feedback = []\n            for cand in candidate_infos:\n                feedback1, _ = primary_verifier_agent([\n                    taskInfo, cand['thinking'], cand['answer']\n                ], primary_verifier_instruction, 0)\n                feedback2, _ = step_verifier_agent([\n                    taskInfo, cand['thinking'], cand['answer']\n                ], step_verifier_instruction, 0)\n                all_feedback.extend([feedback1, feedback2])\n            refine_instruction = (\n                \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempts. \"\n                \"Pay special attention to unit conversions, aggregation logic, and whether all constraints (such as number of boxes, leftover items, or resource allocation) are satisfied. \"\n                \"Using insights from previous attempts, try to solve the task better.\"\n            )\n            cot_agent_refine = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent (Refine)', temperature=0.8)\n            candidate_infos = []\n            for i in range(K):\n                context = [taskInfo] + all_thinking + all_answers + all_feedback\n                thinking, answer = cot_agent_refine(context, refine_instruction, i)\n                candidate_infos.append({'thinking': thinking, 'answer': answer})\n        doubly_verified_answers, all_answers, _ = stepwise_verification(candidate_infos)\n        if doubly_verified_answers:\n            return most_frequent_answer(doubly_verified_answers)\n    return most_frequent_answer(all_answers)\n",
        "generation": 3,
        "label": "outer_loop",
        "special_label": "fail_reflexion",
        "fitness": "Accuracy: 94.6%"
    }
]