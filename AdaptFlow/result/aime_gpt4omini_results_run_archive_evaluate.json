[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 10.1%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate answer.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 10.5%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better answers for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the answer based on other agents' answers\n    debate_instruction = \"Given answers to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and answers\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and answers\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 13.7%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate answer.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 4.8%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting answers could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best answer.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 9.4%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "Accuracy: 9.7%"
    },
    {
        "reflection": "The observed mistakes indicate several recurring failure modes: (1) The agent sometimes produces an answer in the wrong form (e.g., extracting the wrong number from a probability fraction, or failing to answer with the requested sum or largest value). (2) For combinatorial, polynomial, or geometry problems, the agent may misinterpret the question, skip critical constraints, or make calculation errors. (3) In some cases, the answer is missing entirely, suggesting that the agent's reasoning or answer extraction step failed. These issues point to two main weaknesses: (a) insufficient focus on the exact answer format and requirements, and (b) lack of robust answer verification against the problem statement. To address these, the agent should explicitly check that its answer matches the required form and constraints, and, if possible, verify the answer by plugging it back into the problem or by using a dedicated answer-checking module. Additionally, the agent should be prompted to restate the answer requirement in its own words before solving, to ensure correct interpretation.",
        "thought": "**Insights:**\nThe best-performing solutions for the MATH subtasks reveal several key strategies: (1) Chain-of-Thought (CoT) reasoning is a strong baseline, but its accuracy is limited; (2) Stepwise Critique and Verification, especially with external hints, substantially boosts performance on complex, multi-step problems; (3) Quality-Diversity (QD) and Step-back Abstraction (principle extraction) can help in cases where initial reasoning is insufficient or stuck. However, invoking all these modules for every problem would be unnecessarily complex and costly.\n\n**Overall Idea:**\nDesign a modular, adaptive agent that first attempts a strong, efficient baseline (CoT with stepwise critique and correction), and only escalates to more advanced modules (external hints, QD, or principle abstraction) if needed. This mirrors human problem-solving: try to solve directly, debug if needed, and only seek external help or alternative perspectives if stuck. The agent should:\n1. Attempt CoT with stepwise critique and correction (as in Stepwise Critique with External Hints).\n2. If still stuck after a fixed number of correction rounds, adaptively invoke either (a) the external hints module (for multi-step math), (b) QD (to generate diverse solutions), or (c) principle abstraction (for science/physics/chemistry/biology problems), depending on the problem type or failure pattern.\n3. Aggregate all candidate answers and use a final decision agent to select the best answer.\n\nThis approach balances generality, adaptability, and efficiency, and is not much more complex than the best single-task agent.\n\n**Implementation:**\n- Start with CoT agent generating steps and answer.\n- Use a stepwise critic to mark faulty steps and suggest fixes.\n- If all steps are correct, return the answer.\n- Otherwise, correct faulty steps (up to N_fix rounds).\n- If still stuck, escalate:\n  - For math problems: invoke external hints for faulty steps and revise.\n  - For science/physics/chemistry/biology: invoke principle abstraction agent and re-solve.\n  - Optionally, generate a diverse solution via QD agent.\n- Aggregate all candidate answers and have a final decision agent select the best one.\n- Always return the best answer obtained.",
        "name": "Adaptive Critique & Escalation Agent",
        "code": "def forward(self, taskInfo):\n    # Define instructions\n    cot_initial_instruction = (\n        \"Please solve the following problem step by step. Output your reasoning as a numbered list of steps (e.g., Step 1: ..., Step 2: ..., etc.), followed by your final answer.\"\n    )\n    cot_fix_instruction = (\n        \"Given your previous reasoning steps, feedback on which step(s) are incorrect, and suggested fixes, revise ONLY the faulty step(s) as indicated. Keep all other steps unchanged. Then, update your final answer accordingly. Output the revised list of steps and your new answer.\"\n    )\n    cot_hint_fix_instruction = (\n        \"Given your previous reasoning steps, feedback on which step(s) are incorrect, and an external hint or worked example for the faulty step, revise ONLY the faulty step(s) as indicated, explicitly using the hint. Keep all other steps unchanged. Then, update your final answer accordingly. Output the revised list of steps and your new answer.\"\n    )\n    critic_instruction = (\n        \"Given the reasoning steps and final answer above, review each step one by one. For each step, indicate whether it is correct ('True' or 'False'). If a step is incorrect, provide feedback explaining the error and suggest how to fix it. Return a list of correctness flags (one per step), feedback (if any), and suggestions (if any). If all steps are correct, output 'True' for all flags and leave feedback/suggestions empty.\"\n    )\n    hint_instruction = (\n        \"Given the original problem and the faulty step below, provide a worked example, hint, or key lemma that would help fix this step. Be specific and detailed, but only address the faulty step.\"\n    )\n    principle_instruction = (\n        \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n    )\n    cot_with_principle_instruction = (\n        \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n    )\n    qd_instruction = (\n        \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    )\n    final_decision_instruction = (\n        \"Given all the above answers and reasoning, reason over them carefully and provide a final answer.\"\n    )\n    # Instantiate agents\n    cot_agent = LLMAgentBase(['steps', 'answer'], 'Chain-of-Thought Agent')\n    critic_agent = LLMAgentBase(['step_flags', 'feedback', 'suggestions'], 'Stepwise Critic Agent')\n    hint_agent = LLMAgentBase(['hint'], 'External Hints Agent')\n    principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n    cot_with_principle_agent = LLMAgentBase(['thinking', 'answer'], 'CoT with Principle Agent')\n    qd_agent = LLMAgentBase(['thinking', 'answer'], 'Quality-Diversity Agent')\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    # Step 1: Initial CoT\n    cot_inputs = [taskInfo]\n    steps, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n    N_fix = 2  # Number of correction rounds before escalation\n    for i in range(N_fix):\n        step_flags, feedback, suggestions = critic_agent([taskInfo, steps, answer], critic_instruction, i)\n        flags = step_flags.content if hasattr(step_flags, 'content') else step_flags\n        if 'False' not in flags:\n            return answer\n        cot_inputs = [taskInfo, steps, answer, step_flags, feedback, suggestions]\n        steps, answer = cot_agent(cot_inputs, cot_fix_instruction, i + 1)\n    # Step 2: Escalation if still faulty\n    candidate_infos = [steps, answer]\n    step_flags, feedback, suggestions = critic_agent([taskInfo, steps, answer], critic_instruction, N_fix + 1)\n    flags = step_flags.content if hasattr(step_flags, 'content') else step_flags\n    if 'False' in flags:\n        # Determine if the problem is science (physics, chemistry, biology) by keyword\n        task_text = taskInfo.content.lower() if hasattr(taskInfo, 'content') else str(taskInfo)\n        is_science = any(x in task_text for x in ['physics', 'chemistry', 'biology'])\n        if is_science:\n            # Principle abstraction route\n            thinking, principle = principle_agent([taskInfo], principle_instruction)\n            thinking2, answer2 = cot_with_principle_agent([taskInfo, thinking, principle], cot_with_principle_instruction)\n            candidate_infos.extend([thinking, principle, thinking2, answer2])\n        else:\n            # Math: External hints for each faulty step\n            try:\n                flags_list = eval(flags) if isinstance(flags, str) else flags\n            except:\n                flags_list = flags\n            faulty_indices = [idx for idx, flag in enumerate(flags_list) if flag == 'False']\n            try:\n                step_lines = eval(steps.content) if hasattr(steps, 'content') else eval(steps)\n            except:\n                step_lines = []\n            for idx in faulty_indices:\n                step_text = step_lines[idx] if idx < len(step_lines) else ''\n                hint = hint_agent([taskInfo, Info('faulty_step', 'Stepwise Critic Agent', step_text, N_fix)], hint_instruction, N_fix)\n                cot_inputs_hint = [taskInfo, steps, answer, step_flags, feedback, suggestions, hint[0]]\n                steps2, answer2 = cot_agent(cot_inputs_hint, cot_hint_fix_instruction, N_fix + 100 + idx)\n                candidate_infos.extend([hint[0], steps2, answer2])\n        # Quality-Diversity: try a diverse solution\n        thinking_qd, answer_qd = qd_agent([taskInfo, steps, answer], qd_instruction)\n        candidate_infos.extend([thinking_qd, answer_qd])\n    # Step 3: Final decision among all candidate answers\n    thinking_final, answer_final = final_decision_agent([taskInfo] + candidate_infos, final_decision_instruction)\n    return answer_final\n",
        "fitness": "Accuracy: 22.6%",
        "generation": 3,
        "label": "outer_loop",
        "special_label": "fail_reflexion"
    }
]